<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO"#>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System.Xml.Serialization"#>
<#+
    SPIRVGrammar _grammarCache = null;

    public SPIRVGrammar LoadGrammar()
    {
        if (_grammarCache != null)
        {
            return _grammarCache;
        }

        var xml = new XmlSerializer(typeof(SPIRVGrammar));
        using var file = File.Open(Path.Combine(Host.ResolvePath("."), "spirv.grammar.xml"), FileMode.Open);

        var grammar = (SPIRVGrammar) xml.Deserialize(file);

        //Sanitize operand names
        grammar.Instructions.Instructions.ForEach(op =>
            op.Operands?.Operands?.ForEach(operand => operand.Name = operand.Name?.
                Replace(" ", "").
                Replace("'", "").
                Replace(".", "").
                Replace(",", "").
                Replace("+", "").
                Replace(">", "").
                Replace("<", "").
                Replace("\n", "").
                Replace("~", "").
                Replace("...", "").
                Replace("ref", "")
                ));

        //Sanitize names starting with numbers
        grammar.Types.Types.ForEach(kind =>
            kind.Enumerants?.Enumerants?.ForEach(e =>
                e.Name = char.IsDigit(e.Name[0]) ? "Num" + e.Name : e.Name));

        _grammarCache = grammar;

        return grammar;
    }

    [XmlRoot("root")]
    public class SPIRVGrammar
    {
        [XmlElement("instructions")]
        public SPRIVInstructions Instructions { get; set; }

        [XmlElement("operand_kinds")]
        public SPIRVTypes Types { get; set; }
    }

    [XmlRoot("instructions")]
    public class SPRIVInstructions
    {
        [XmlElement("element")]
        public List<SPIRVOp> Instructions { get; set; }
    }

    [XmlRoot("operand_kinds")]
    public class SPIRVTypes
    {
        [XmlElement("element")]
        public List<SPIRVType> Types { get; set; }
    }

    [XmlRoot("element")]
    public class SPIRVOp
    {
        [XmlElement("opname")]
        public string OpName { get; set; }

        [XmlElement("opcode")]
        public int OpCode { get; set; }

        [XmlElement("operands")]
        public SPIRVOpOperands Operands { get; set; }
    }

    [XmlRoot("operands")]
    public class SPIRVOpOperands
    {
        [XmlElement("element")]
        public List<SPIRVOperand> Operands { get; set; }
    }

    [XmlRoot("element")]
    public class SPIRVOperand
    {
        [XmlElement("kind")]
        public string Type { get; set; }

        [XmlElement("name")]
        public string Name { get; set; }

        [XmlElement("quantifier")]
        public string Quantifier { get; set; }
    }

    [XmlRoot("element")]
    public class SPIRVType
    {
        [XmlElement("bases")]
        public SPIRVBases Bases { get; set; }

        [XmlElement("category")]
        public string Category { get; set; }

        [XmlElement("enumerants")]
        public SPIRVEnumerants Enumerants { get; set; }

        [XmlElement("kind")]
        public string Name { get; set; }
    }

    [XmlRoot("bases")]
    public class SPIRVBases
    {
        [XmlElement("element")]
        public List<string> Bases { get; set; }
    }

    [XmlRoot("enumerants")]
    public class SPIRVEnumerants
    {
        [XmlElement("element")]
        public List<SPIRVEnumerant> Enumerants { get; set; }
    }

    [XmlRoot("element")]
    public class SPIRVEnumerant
    {
        [XmlElement("enumerant")]
        public string Name { get; set; }

        [XmlElement("value")]
        public string Value { get; set; }
    }
#>