<#@ template hostspecific="true" language="C#" #>
<#@ include file="SPIRVTypeMappings.ttinclude"
#><#@ output extension=".cs"#>
<#@ assembly name="System.Xml" #>
<#const string standardIndent = "    ";#>
#pragma warning disable 1591

using System;

namespace ILGPU.Backends.SPIRV {
<#
    var grammar = LoadGrammar();
    var typeMap = LoadTypeMap();

    PushIndent(standardIndent);

    foreach (var kind in grammar.Types.Types)
    {
        GenerateType(kind);
    }

    void GenerateType(SPIRVType kind)
    {
        switch (kind.Category)
        {
            case "BitEnum":
                GenerateBitEnumType(kind);
                break;
            case "ValueEnum":
                GenerateValueEnum(kind);
                break;
            case "Composite":
                GenerateComposite(kind);
                break;
        }
    }

    void GenerateBitEnumType(SPIRVType kind)
    {
#>public enum <#= kind.Name#> {
<#
        PushIndent(standardIndent);
        foreach (var enumerant in kind.Enumerants.Enumerants)
        {
#><#= enumerant.Name#> = <#= Convert.ToInt32(enumerant.Value, 16)#>,
<#
        }
        PopIndent();
#>}
<#
    }

    void GenerateValueEnum(SPIRVType kind)
    {
#>public enum <#= kind.Name#> {
<#
        PushIndent(standardIndent);
        foreach (var enumerant in kind.Enumerants.Enumerants)
        {
#><#= enumerant.Name#> = <#= Convert.ToInt32(enumerant.Value)#>,
<#
        }
        PopIndent();
#>}
<#
    }

    void GenerateComposite(SPIRVType kind)
    {
#>public struct <#= kind.Name#> {
<#
        PushIndent(standardIndent);
        for (int i = 0; i < kind.Bases.Bases.Count; i++)
        {
            string kindBase = kind.Bases.Bases[i];
            if (!IsCLSCompliant(kindBase))
            {
#>[CLSCompliant(false)]
<#
            }
#>public <#= typeMap[kindBase]#> base<#= i#>;
<#
        }
        PopIndent();
#>}
<#
    }

    PopIndent();
#>
}
#pragma warning restore 1591